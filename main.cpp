#include <fstream>
#include <vector>
#include <iostream>
#include <random>
#include <set>
#include <algorithm>
#include <functional>
#include <chrono>
#include "betree.h"
#include "dual_betree.cpp"
using namespace std; 

int main(int argc, char **argv)
{
    if (argc < 3)
    {
        std::cout << "Usage: ./main <input_file> <test_case>" << std::endl;
        return 0;
    }

    std::string input_file = argv[1];
    std::string test_case = argv[2];

    // read data generated by workload generator
    std::ifstream ifs;
    std::vector<int> data;

    ifs.open(input_file, std::ios::binary);
    ifs.seekg(0, std::ios::end);
    size_t filesize = ifs.tellg();
    ifs.seekg(0, std::ios::beg);

    data.resize(filesize / sizeof(int));
    ifs.read((char *)data.data(), filesize);

    // Loop through data and turn each elements into pair type
    std::vector<std::pair<int,int>> kvs;
    for(int i : data){
        pair<int, int> inner_pair;
        inner_pair.first = data[i];
        inner_pair.second = data[i];
        kvs.push_back(inner_pair);
    }
    DualBeTree(kvs,1);
    return 1; 
}
